{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/home/ben/Repos/Integradora-HonorTech/RestaurantExpo/app/components/Account/FormRegistro.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState } from \"react\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport { Input, Icon, Button } from \"react-native-elements\";\nimport { validarEmail } from \"../../utils/validaciones\";\nimport { size, isEmpty } from \"lodash\";\nimport firebase from 'firebase/app';\nimport { useNavigation } from \"@react-navigation/native\";\nexport default function FormRegistro(toast) {\n  var navigation = useNavigation();\n  var toastRef = toast.toastRef;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      mostrar = _useState2[0],\n      setMostrar = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      mostrar2 = _useState4[0],\n      setMostrar2 = _useState4[1];\n\n  var _useState5 = useState(valoresDefault),\n      _useState6 = _slicedToArray(_useState5, 2),\n      datos = _useState6[0],\n      setDatos = _useState6[1];\n\n  var onSubmit = function onSubmit() {\n    if (isEmpty(datos.email) || isEmpty(datos.password) || isEmpty(datos.repeatedPassword)) {\n      toastRef.current.show(\"No puedes dejar campos vacios\");\n      console.log(\"No puedes dejar campos vacios\");\n    } else if (!validarEmail(datos.email)) {\n        toastRef.current.show(\"Estructura del email incorrecta\");\n        console.log(\"Estructura del email incorrecta\");\n      } else if (size(datos.password) < 6) {\n          toastRef.current.show(\"La contraseña debe tener al menos 6 caracteres\");\n          console.log(\"La contraseña debe tener al menos 6 caracteres\");\n        } else if (datos.password !== datos.repeatedPassword) {\n            toastRef.current.show(\"Las contraseñas deben ser iguales\");\n            console.log(\"Las contraseñas deben ser iguales\");\n          } else {\n              firebase.auth().createUserWithEmailAndPassword(datos.email, datos.password).then(function (respuesta) {\n                navigation.navigate(\"cuentas\");\n              }).catch(function () {\n                toastRef.current.show(\"El correo electrónico ya está en uso, intente con un correo diferente\");\n              });\n            }\n  };\n\n  var _onChange = function onChange(e, type) {\n    setDatos(_objectSpread(_objectSpread({}, datos), {}, _defineProperty({}, type, e.nativeEvent.text)));\n  };\n\n  return React.createElement(View, {\n    style: styles.formContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 5\n    }\n  }, React.createElement(Input, {\n    placeholder: \"Correo Electr\\xF3nico\",\n    containerStyle: styles.inputForm,\n    onChange: function onChange(e) {\n      return _onChange(e, \"email\");\n    },\n    rightIcon: React.createElement(Icon, {\n      type: \"material-community-icon\",\n      name: \"alternate-email\",\n      iconStyle: styles.icono,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 11\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }\n  }), React.createElement(Input, {\n    placeholder: \"Contrase\\xF1a\",\n    containerStyle: styles.inputForm,\n    password: true,\n    secureTextEntry: mostrar ? false : true,\n    onChange: function onChange(e) {\n      return _onChange(e, \"password\");\n    },\n    rightIcon: React.createElement(Icon, {\n      type: \"material-community-icon\",\n      name: mostrar ? \"visibility\" : \"visibility-off\",\n      iconStyle: styles.icono,\n      onPress: function onPress() {\n        return setMostrar(!mostrar);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 11\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }\n  }), React.createElement(Input, {\n    placeholder: \"Repetir Contrase\\xF1a\",\n    containerStyle: styles.inputForm,\n    password: true,\n    secureTextEntry: mostrar2 ? false : true,\n    onChange: function onChange(e) {\n      return _onChange(e, \"repeatedPassword\");\n    },\n    rightIcon: React.createElement(Icon, {\n      type: \"material-community-icon\",\n      name: mostrar2 ? \"visibility\" : \"visibility-off\",\n      iconStyle: styles.icono,\n      onPress: function onPress() {\n        return setMostrar2(!mostrar2);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 11\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }\n  }), React.createElement(Button, {\n    title: \"Registrar\",\n    containerStyle: styles.btnContainer,\n    buttonStyle: styles.btn,\n    onPress: onSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 7\n    }\n  }));\n}\n\nfunction valoresDefault() {\n  return {\n    email: \"\",\n    password: \"\",\n    repeatedPassword: \"\"\n  };\n}\n\nvar styles = StyleSheet.create({\n  formContainer: {\n    flex: 1,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    marginTop: 30\n  },\n  inputForm: {\n    width: \"100%\",\n    marginTop: 20\n  },\n  btnContainer: {\n    marginTop: 20,\n    width: \"100%\"\n  },\n  btn: {\n    backgroundColor: \"#0A6ED3\"\n  },\n  icono: {\n    color: \"#c1c1c1\"\n  }\n});","map":{"version":3,"sources":["/home/ben/Repos/Integradora-HonorTech/RestaurantExpo/app/components/Account/FormRegistro.js"],"names":["React","useState","Input","Icon","Button","validarEmail","size","isEmpty","firebase","useNavigation","FormRegistro","toast","navigation","toastRef","mostrar","setMostrar","mostrar2","setMostrar2","valoresDefault","datos","setDatos","onSubmit","email","password","repeatedPassword","current","show","console","log","auth","createUserWithEmailAndPassword","then","respuesta","navigate","catch","onChange","e","type","nativeEvent","text","styles","formContainer","inputForm","icono","btnContainer","btn","StyleSheet","create","flex","alignItems","justifyContent","marginTop","width","backgroundColor","color"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\nimport { StyleSheet, View, Text } from \"react-native\";\r\nimport { Input, Icon, Button } from \"react-native-elements\";\r\nimport { validarEmail } from \"../../utils/validaciones\";\r\nimport { size, isEmpty } from \"lodash\";\r\n//importamos la dependencia a firebase\r\nimport firebase from 'firebase/app';\r\nimport {useNavigation} from \"@react-navigation/native\"\r\n\r\nexport default function FormRegistro(toast) {\r\n  //declaramos el objeto que manipulará el toast\r\n  const navigation =useNavigation();\r\n  const { toastRef } = toast;\r\n  const [mostrar, setMostrar] = useState(false);\r\n  const [mostrar2, setMostrar2] = useState(false);\r\n  /*El estado datos almacenará los datos del formulario\r\n  por default se inicializa con los campos creados\r\n  en la función valoresDefault */\r\n  const [datos, setDatos] = useState(valoresDefault);\r\n\r\n  /*Método que se ejecutará al dar clic en el botón\r\n  nos permitirá por el momento verificar en consola\r\n  los datos recuperados del formulario*/\r\n  const onSubmit = () => {\r\n    //Verificamos que no se envíen datos vacíos\r\n    if (\r\n      isEmpty(datos.email) ||\r\n      isEmpty(datos.password) ||\r\n      isEmpty(datos.repeatedPassword)\r\n    ) {\r\n      //Enviamos el mensaje al cuerpo del toast para hacerlo visible\r\n      toastRef.current.show(\"No puedes dejar campos vacios\");\r\n      console.log(\"No puedes dejar campos vacios\");\r\n    } //Validados la estructura del email\r\n    else if (!validarEmail(datos.email)) {\r\n      //Enviamos el mensaje al cuerpo del toast para hacerlo visible\r\n      toastRef.current.show(\"Estructura del email incorrecta\");\r\n      console.log(\"Estructura del email incorrecta\");\r\n    } //Validamos que la contraseña tenga al menos 6 carácteres\r\n    else if (size(datos.password) < 6) {\r\n      //Enviamos el mensaje al cuerpo del toast para hacerlo visible\r\n      toastRef.current.show(\"La contraseña debe tener al menos 6 caracteres\");\r\n      console.log(\"La contraseña debe tener al menos 6 caracteres\");\r\n    } //Validamos que las contraseñas sean iguales\r\n    else if (datos.password !== datos.repeatedPassword) {\r\n      //Enviamos el mensaje al cuerpo del toast para hacerlo visible\r\n      toastRef.current.show(\"Las contraseñas deben ser iguales\");\r\n      console.log(\"Las contraseñas deben ser iguales\");\r\n    } //Si todo es correcto visualizaremos los datos\r\n    else {\r\n      /*Ejecutamos la autenticación por email, la función requiere dos valores\r\n      email y contraseña. La función createUserWithEmailAndPassword retorna una\r\n      promesa por lo que si el resultado es resolve el objeto almacenado lo atrapamos\r\n      como respuesta y lo visualizamos en consola. Si el resultado de una promesa es\r\n      un reject mostramos el error en el catch\r\n      */\r\n      firebase\r\n        .auth()\r\n        .createUserWithEmailAndPassword(datos.email, datos.password)\r\n        .then((respuesta) => {\r\n          navigation.navigate(\"cuentas\");\r\n        })\r\n        .catch(() => {\r\n          toastRef.current.show(\"El correo electrónico ya está en uso, intente con un correo diferente\")\r\n        });\r\n      /*  toastRef.current.show(\"Envio correcto de los datos\");\r\n      console.log(\"ok\");\r\n      console.log(datos); */\r\n    }\r\n  };\r\n  /*Método que se activará al escribir en los campos\r\n del formulario:\r\n e -> Contiene los datos del evento\r\n type -> El nombre del campo que se actualizará en el estado */\r\n  const onChange = (e, type) => {\r\n    /*\r\n  ...datos -> Indica que se actualizarán los campos\r\n  que contiene el estado \"datos\" que como se crearton en\r\n  la función valoresDefault son email, password y repeatPassword\r\n  [type] -> Pemite recuperar el nombre del campo que se modificará.\r\n  e.nativeEvent.text -> Recupera el texto input\r\n  */\r\n    setDatos({ ...datos, [type]: e.nativeEvent.text });\r\n  };\r\n  return (\r\n    <View style={styles.formContainer}>\r\n      <Input\r\n        placeholder=\"Correo Electrónico\"\r\n        containerStyle={styles.inputForm}\r\n        /*Es el que manda la información del input*/\r\n        onChange={(e) => onChange(e, \"email\")}\r\n        rightIcon={\r\n          <Icon\r\n            type=\"material-community-icon\"\r\n            name=\"alternate-email\"\r\n            iconStyle={styles.icono}\r\n          />\r\n        }\r\n      />\r\n      <Input\r\n        placeholder=\"Contraseña\"\r\n        containerStyle={styles.inputForm}\r\n        password={true}\r\n        /*Si mostrar es false se oculta el texto\r\n        de lo contrario se muestra*/\r\n        secureTextEntry={mostrar ? false : true}\r\n        /*Es el que manda la información del input*/\r\n        onChange={(e) => onChange(e, \"password\")}\r\n        rightIcon={\r\n          <Icon\r\n            type=\"material-community-icon\"\r\n            /*Si mostrar es false se muestra el icono\r\n            de ocultar contraseña de lo contrario se muestra\r\n            el icono de ver contraseña*/\r\n            name={mostrar ? \"visibility\" : \"visibility-off\"}\r\n            iconStyle={styles.icono}\r\n            onPress={() => setMostrar(!mostrar)}\r\n          />\r\n        }\r\n      />\r\n      <Input\r\n        placeholder=\"Repetir Contraseña\"\r\n        containerStyle={styles.inputForm}\r\n        password={true}\r\n        /*Si mostrar es false se oculta el texto\r\n        de lo contrario se muestra*/\r\n        secureTextEntry={mostrar2 ? false : true}\r\n        /*Es el que manda la información del input*/\r\n        onChange={(e) => onChange(e, \"repeatedPassword\")}\r\n        rightIcon={\r\n          <Icon\r\n            type=\"material-community-icon\"\r\n            /*Si mostrar es false se muestra el icono\r\n            de ocultar contraseña de lo contrario se muestra\r\n            el icono de ver contraseña*/\r\n            name={mostrar2 ? \"visibility\" : \"visibility-off\"}\r\n            iconStyle={styles.icono}\r\n            onPress={() => setMostrar2(!mostrar2)}\r\n          />\r\n        }\r\n      />\r\n      <Button\r\n        title=\"Registrar\"\r\n        containerStyle={styles.btnContainer}\r\n        buttonStyle={styles.btn}\r\n        /*Al hacer clic activamos el método onSubmit del botón */\r\n        onPress={onSubmit}\r\n      />\r\n    </View>\r\n  );\r\n}\r\n\r\nfunction valoresDefault() {\r\n  return {\r\n    email: \"\",\r\n    password: \"\",\r\n    repeatedPassword: \"\",\r\n  };\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  formContainer: {\r\n    flex: 1,\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n    marginTop: 30,\r\n  },\r\n  inputForm: {\r\n    width: \"100%\",\r\n    marginTop: 20,\r\n  },\r\n  btnContainer: {\r\n    marginTop: 20,\r\n    width: \"100%\",\r\n  },\r\n  btn: {\r\n    backgroundColor: \"#0A6ED3\",\r\n  },\r\n  icono: {\r\n    color: \"#c1c1c1\",\r\n  },\r\n});\r\n"]},"metadata":{},"sourceType":"module"}